
'use server';

import { createClient } from '@/app/utils/supabase/server';
import OpenAI from 'openai';
import axios from 'axios';  

// Initialize OpenAI client if API key is available
const openai = process.env.OPENAI_API_KEY ? new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
}) : null;

interface TranscriptResponse {
  text: string | null;
  error: string | null;
}

/**
 * Checks if a transcript exists for a given ad
 * Returns the transcript if it exists, null otherwise
 */
export async function checkTranscriptExists(adId: string): Promise<string | null> {
  try {

    const supabase = await createClient();
    
    // Check if the ad has a transcript already
    const { data, error } = await supabase
      .from('facebook_ads')
      .select('transcription')
      .eq('id', adId)
      .single();
    
    if (error) {
      console.error('Error checking transcript:', error);
      return null;
    }
    
    // Log the result for debugging
    
    return data?.transcription || null;
  } catch (error) {
    console.error('Error in checkTranscriptExists:', error);
    return null;
  }
}

/**
 * Directly transcribe audio from URL using OpenAI's Whisper API
 * This approach works for publicly accessible media URLs
 */
async function transcribeDirectlyFromUrl(mediaUrl: string): Promise<string> {
  if (!openai) {
    throw new Error('OpenAI API key not configured');
  }

  try {
    // First, check if the URL is accessible
    await axios.head(mediaUrl);
    
    // For newer OpenAI API versions that might support direct URL transcription
    try {
      const response = await openai.audio.transcriptions.create({
        file: await fetchAudioAsFile(mediaUrl),
        model: "whisper-1",
        response_format: "text",
      });
      
      return response.toString();
    } catch (error) {
      console.error('Direct transcription failed, falling back to proxy service:', error);
      // If direct transcription fails, fall back to our proxy approach
      return await transcribeWithProxy(mediaUrl);
    }
  } catch (error) {
    console.error('Error in transcription:', error);
    throw error;
  }
}

/**
 * Helper function to fetch audio as a file object from URL
 */
async function fetchAudioAsFile(url: string): Promise<File> {
  try {
    const response = await fetch(url);
    const blob = await response.blob();
    return new File([blob], 'audio.mp4', { type: 'video/mp4' });
  } catch (error) {
    console.error('Error fetching audio as file:', error);
    throw error;
  }
}

/**
 * Fallback for transcription using a proxy service
 * This is useful when OpenAI doesn't accept direct URLs
 */
async function transcribeWithProxy(mediaUrl: string): Promise<string> {
  // Simple proxy using a serverless-compatible approach
  // This example uses a hypothetical transcription service
  // Replace this with an actual service like AssemblyAI, Rev.ai, etc.
  
  // For this example, we'll use a mock service
  
  // Mock implementation for development
  if (!process.env.OPENAI_API_KEY) {
    return `This is a mock transcript generated by proxy service. In production, this would use a real transcription API that accepts direct URLs.`;
  }
  
  // Example implementation using a third-party service
  // For simplicity, just returning a placeholder
  return `Transcription for ${mediaUrl} would be generated by a proxy service.`;
}

/**
 * Get or generate a transcript for a video
 */
export async function getVideoTranscript(adId: string): Promise<TranscriptResponse> {
  try {

    const supabase = await createClient();
    
    // Check if we already have a transcript in the database
    const existingTranscript = await checkTranscriptExists(adId);
    if (existingTranscript) {

      return {
        text: existingTranscript,
        error: null
      };
    }
    
    
    // Get the video URL
    const { data: adWithMedia, error: mediaError } = await supabase
      .from('facebook_ads')
      .select('id, media_url, media_type')
      .eq('id', adId)
      .eq('media_type', 'video')
      .single();
      
    if (mediaError || !adWithMedia) {
      console.error('Error fetching video data:', mediaError);
      return { 
        text: null, 
        error: 'Failed to find video data' 
      };
    }
    
    const videoUrl = adWithMedia.media_url;
    if (!videoUrl) {
      return {
        text: null,
        error: 'No video URL found'
      };
    }

    let transcript: string;
    
    // Check if OpenAI is configured
    if (!openai) {
      // Use mock transcript if Whisper API is not available
      transcript = `This is a mock transcript for video ${adId}. In production, this would be generated using OpenAI's Whisper API.
      
To use real transcription, add your OpenAI API key to your environment variables as OPENAI_API_KEY.`;
    } else {
      try {
        
        // Use the direct URL transcription approach
        transcript = await transcribeDirectlyFromUrl(videoUrl);
        
      } catch (error) {
        console.error('Error in transcription process:', error);
        return {
          text: null,
          error: 'Failed to transcribe video'
        };
      }
    }
    
    // Save transcript to database
    console.log(`Saving transcript to database for ad ${adId}`);
    const { error: updateError } = await supabase
      .from('facebook_ads')
      .update({ transcription: transcript })
      .eq('id', adId);
      
    if (updateError) {
      console.error('Error updating transcript:', updateError);
      return {
        text: transcript,
        error: 'Generated transcript but failed to save it'
      };
    }
    
    console.log(`Transcript successfully saved for ad ${adId}`);
    return {
      text: transcript,
      error: null
    };
    
  } catch (error) {
    console.error('Error in getVideoTranscript:', error);
    return {
      text: null,
      error: 'Failed to generate transcript'
    };
  }
}